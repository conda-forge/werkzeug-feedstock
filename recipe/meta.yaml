{% set version = "3.1.0" %}
{% set cov_fail_under = 83 %}
# if this becomes a list, should be ` or `-delimited, with parentheses: "(exclude_patterns or foo_bar)"
{% set test_skip = "exclude_patterns" %}

package:
  name: werkzeug
  version: {{ version }}

source:
  url: https://pypi.org/packages/source/w/werkzeug/werkzeug-{{ version }}.tar.gz
  sha256: 6f2a0d38f25ba5a75c36c45b4ae350c7a23b57e3b974e9eb2d6851f2c648c00d

build:
  noarch: python
  number: 0
  script: 
    - {{ PYTHON }} -m pip install . --no-deps -vv --no-build-isolation --disable-pip-version-check

requirements:
  host:
    - flit-core <4
    - pip
    - python >=3.9
  run:
    - markupsafe >=2.1.1
    - python >=3.9

test:
  source_files:
    - tests
    - pyproject.toml
  requires:
    - coverage
    - cryptography
    - ephemeral-port-reserve
    - greenlet
    - mypy
    - pip
    - pytest
    - pytest-timeout
    - pytest-xprocess
    - types-setuptools
    - watchdog
  imports:
    - werkzeug
  commands:
    - pip check
    - coverage run -m pytest -vv --tb=long --color=yes -k "not {{ test_skip }}"
    - coverage report --fail-under={{ cov_fail_under }}
    - mypy --disable-error-code unused-ignore -p werkzeug

about:
  home: https://palletsprojects.com/p/werkzeug/
  license: BSD-3-Clause
  license_family: BSD
  license_file: LICENSE.txt
  summary: The comprehensive WSGI web application library.
  description: |
    **_werkzeug_** German noun: "tool". Etymology: *werk* ("work"), *zeug* ("stuff")

    Werkzeug is a comprehensive [WSGI](https://wsgi.readthedocs.io/en/latest/) web application library. It began as
    a simple collection of various utilities for WSGI applications and has
    become one of the most advanced WSGI utility libraries.

    It includes:

      -   An interactive debugger that allows inspecting stack traces and
          source code in the browser with an interactive interpreter for any
          frame in the stack.
      -   A full-featured request object with objects to interact with
          headers, query args, form data, files, and cookies.
      -   A response object that can wrap other WSGI applications and handle
          streaming data.
      -   A routing system for matching URLs to endpoints and generating URLs
          for endpoints, with an extensible system for capturing variables
          from URLs.
      -   HTTP utilities to handle entity tags, cache control, dates, user
          agents, cookies, files, and more.
      -   A threaded WSGI server for use while developing applications
          locally.
      -   A test client for simulating HTTP requests during testing without
          requiring running a server.

    Werkzeug doesn't enforce any dependencies. It is up to the developer to
    choose a template engine, database adapter, and even how to handle
    requests. It can be used to build all sorts of end user applications
    such as blogs, wikis, or bulletin boards.

    [Flask](https://www.palletsprojects.com/p/flask/) wraps Werkzeug, using it to handle the details of WSGI while
    providing more structure and patterns for defining powerful
    applications.
  doc_url: https://werkzeug.palletsprojects.com/
  dev_url: https://github.com/pallets/werkzeug

extra:
  recipe-maintainers:
    - goanpeca
    - bollwyvl
